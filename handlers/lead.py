from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from keyboards.lead import get_contact_kb
from keyboards.start import get_start_kb, get_back_kb
from services.api import ApiService
from states.lead import LeadForm

router = Router()
EMAIL_PATTERN = r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"
PHONE_PATTERN = r"^\+?\d{9,15}$"


@router.message(F.text == "üîô –ù–∞–∑–∞–¥", LeadForm.email)
async def back_from_email(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=None)
    await state.set_state(LeadForm.full_name)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥", LeadForm.phone)
async def back_from_phone(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.email)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥", LeadForm.company_name)
async def back_from_company_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.phone)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥", LeadForm.company_info)
async def back_from_company_info(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.company_name)


@router.message(F.text, LeadForm.full_name)
async def get_full_name(message: Message, state: FSMContext):
    full_name = message.text
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.email)


@router.message(~F.text, LeadForm.full_name)
async def get_wrong_full_name(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    await state.set_state(LeadForm.full_name)


@router.message(F.text.regexp(EMAIL_PATTERN), LeadForm.email)
async def get_email(message: Message, state: FSMContext):
    email = message.text
    await state.update_data(email=email)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=get_contact_kb())
    await state.set_state(LeadForm.phone)


@router.message(~F.text | ~F.text.regexp(EMAIL_PATTERN), LeadForm.email)
async def wrong_email(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail —Ç–µ–∫—Å—Ç–æ–º (–ø—Ä–∏–º–µ—Ä: `example@gmail.com`)."
    )
    await state.set_state(LeadForm.email)


@router.message(F.text.regexp(PHONE_PATTERN) | F.contact, LeadForm.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip() if not message.contact else message.contact.phone_number
    await state.update_data(phone=phone)
    await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.company_name)


# --- –û—à–∏–±–∫–∞: –Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ---
@router.message(~F.text | ~F.text.regexp(PHONE_PATTERN), LeadForm.phone)
async def wrong_phone(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`+998901234567` –∏–ª–∏ `901234567`.",
        reply_markup=get_back_kb(),
    )


@router.message(F.text, LeadForm.company_name)
async def get_company_name(message: Message, state: FSMContext):
    company_name = message.text.strip()
    await state.update_data(company_name=company_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏:", reply_markup=get_back_kb())
    await state.set_state(LeadForm.company_info)


# --- –ù–µ —Ç–µ–∫—Å—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–¥.) ---
@router.message(~F.text, LeadForm.company_name)
async def wrong_company_name(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É.",
        reply_markup=get_back_kb(),
    )
@router.message(F.text, LeadForm.company_info)
async def get_company_info(message: Message, state: FSMContext):
    company_info = message.text.strip()

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    if len(company_info) < 10:
        await message.answer(
            "‚ùå –û–ø–∏—à–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=get_back_kb(),
        )
        return

    await state.update_data(company_info=company_info)

    data = await state.get_data()
    full_name = data.get("full_name")
    email = data.get("email")
    phone = data.get("phone")
    company_name = data.get("company_name")
    target_id = data.get("target_id")

    service = ApiService()
    response = service.create_lead(
        data={
            "full_name": full_name,
            "email": email,
            "phone": phone,
            "company_name": company_name,
            "company_info": company_info,
            "target_id": target_id,
        },
        target_id=target_id
    )
    if not response:
        await message.answer("–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", reply_markup=get_start_kb())


    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞:\n\n"
        f"üë§ –ò–º—è: {full_name}\n"
        f"üìß –ü–æ—á—Ç–∞: {email}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
        f"‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏: {company_info}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
        reply_markup=get_start_kb(),
    )

    await state.clear()

# --- –ù–µ —Ç–µ–∫—Å—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–ø.) ---
@router.message(~F.text, LeadForm.company_info)
async def wrong_company_info(message: Message, state: FSMContext):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤.",
        reply_markup=get_back_kb(),
    )